name: check

on: push

jobs:
    check-license:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Check license
              run: ./check-license.sh

    build:
        runs-on: ubuntu-16.04
        strategy:
            fail-fast: false
            matrix:
                rust-version: [ 1.41.0, nightly-2019-12-19 ]
                base-ide: [ idea, clion ]
                platform-version: [ 193, 201 ]
                include:
                    - rust-version: 1.32.0
                      base-ide: idea
                      platform-version: 193
        steps:
            - uses: actions/checkout@v1

            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                  java-version: 1.8

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: ${{ matrix.rust-version }}
                  components: rust-src, rustfmt, clippy
                  default: true

            - name: Install evcxr
              if: matrix.rust-version >= '1.40.0' # BACKCOMPAT: Rust 1.39.0
              uses: actions-rs/cargo@v1
              with:
                  command: install
                  args: evcxr_repl

            - name: Check environment
              run: |
                  rustc --version
                  rustup component list --installed
                  cargo install --list

            - name: Set up env variables
              # see https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
              run: |
                  echo "::set-env name=ORG_GRADLE_PROJECT_baseIDE::${{ matrix.base-ide }}"
                  echo "::set-env name=ORG_GRADLE_PROJECT_platformVersion::${{ matrix.platform-version }}"

            - name: Build & check plugin
              run: |
                export RUST_SRC_WITH_SYMLINK=$HOME/.rust-src
                ln -s $(rustc --print sysroot)/lib/rustlib/src/rust/src $RUST_SRC_WITH_SYMLINK
                ./gradlew :resolveDependencies -Pkotlin.incremental=false --no-daemon
                ./gradlew assemble testClasses -Pkotlin.incremental=false --no-daemon
                ./gradlew check -PexcludeTests=org/rustPerformanceTests/** -Pkotlin.incremental=false --no-daemon

            - name: Check bundled Rust formatters
              run: ./gradlew runPrettyPrintersTests --no-daemon
